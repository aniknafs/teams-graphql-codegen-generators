{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./types.ts","webpack:///./schema-single/config.ts","webpack:///./query-single/config.ts","webpack:///./query-multiple/config.ts","webpack:///./typescript-multi-file/config.ts","webpack:///./typescript-single-file/fragments.handlebars","webpack:///./typescript-single-file/selection-set.handlebars","webpack:///./typescript-single-file/config.ts","webpack:///./get-generator.ts","webpack:///./schema-single/schema.handlebars","webpack:///./schema-single/type.handlebars","webpack:///./schema-single/template.handlebars","webpack:///./query-single/fragments.handlebars","webpack:///./query-single/selection-set.handlebars","webpack:///./query-single/documents.handlebars","webpack:///./query-single/type.handlebars","webpack:///./query-single/template.handlebars","webpack:///./query-multiple/fragments.handlebars","webpack:///./query-multiple/selection-set.handlebars","webpack:///./query-multiple/fragment.handlebars","webpack:///./query-multiple/operation.handlebars","webpack:///./query-multiple/scalar.handlebars","webpack:///./query-multiple/enum.handlebars","webpack:///./query-multiple/type.handlebars","webpack:///./typescript-multi-file/fragment.handlebars","webpack:///./typescript-multi-file/operation.handlebars","webpack:///./typescript-multi-file/union.handlebars","webpack:///./typescript-multi-file/scalar.handlebars","webpack:///./typescript-multi-file/enum.handlebars","webpack:///./typescript-multi-file/type.handlebars","webpack:///./typescript-single-file/documents.handlebars","webpack:///./typescript-single-file/schema.handlebars","webpack:///./typescript-single-file/type.handlebars","webpack:///./typescript-single-file/template.handlebars","webpack:///./index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","EInputType","SINGLE_FILE","MULTIPLE_FILES","PROJECT","index","type","schema","config","inputType","templates","flattenTypes","primitives","String","Int","Float","Boolean","ID","outFile","default","documents","selectionSet","fragments","enumTemplate","scalar","operation","fragment","enum","interface","filesExtension","union","config_1","config_2","config_3","config_4","config_5","definitions","ts","typescript","ts-single","typescript-single","ts-multiple","typescript-multiple","query-multiple","query-single","schema-single","getGeneratorConfig","TypescriptSingleFile","TypescriptMultiFile","QueryMultiple","QuerySingle","SchemaSingle","types_1","get_generator_1"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n","// tslint:disable-next-line:variable-name\nexport const EInputType = {\n  SINGLE_FILE: 'SINGLE_FILE',\n  MULTIPLE_FILES: 'MULTIPLE_FILES',\n  PROJECT: 'PROJECT'\n};\n\nexport interface GeneratorConfig {\n  inputType: string; // EInputType\n  flattenTypes: boolean;\n  config?: { [configName: string]: any };\n  templates: { [templateName: string]: string | string[] } | string;\n  primitives: {\n    String: string;\n    Int: string;\n    Float: string;\n    Boolean: string;\n    ID: string;\n  };\n  outFile?: string;\n  filesExtension?: string;\n  customHelpers?: { [helperName: string]: Function };\n}\n","import * as index from './template.handlebars';\nimport * as type from './type.handlebars';\nimport * as schema from './schema.handlebars';\nimport { EInputType, GeneratorConfig } from '../types';\n\nconst config: GeneratorConfig = {\n  inputType: EInputType.SINGLE_FILE,\n  templates: {\n    index,\n    type,\n    schema\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  outFile: 'schema.interface.ts'\n};\n\nexport default config;\n","import * as index from './template.handlebars';\nimport * as type from './type.handlebars';\nimport * as documents from './documents.handlebars';\nimport * as selectionSet from './selection-set.handlebars';\nimport * as fragments from './fragments.handlebars';\nimport { EInputType, GeneratorConfig } from '../types';\n\nconst config: GeneratorConfig = {\n  inputType: EInputType.SINGLE_FILE,\n  templates: {\n    index,\n    type,\n    documents,\n    selectionSet,\n    fragments\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  outFile: 'interfaces.ts'\n};\n\nexport default config;\n","import * as type from './type.handlebars';\nimport * as enumTemplate from './enum.handlebars';\nimport * as scalar from './scalar.handlebars';\nimport * as operation from './operation.handlebars';\nimport * as fragment from './fragment.handlebars';\nimport * as selectionSet from './selection-set.handlebars';\nimport * as fragments from './fragments.handlebars';\nimport { EInputType, GeneratorConfig } from '../types';\n\nconst config: GeneratorConfig = {\n  inputType: EInputType.MULTIPLE_FILES,\n  templates: {\n    inputType: type,\n    enum: enumTemplate,\n    interface: type,\n    scalar,\n    operation,\n    fragment,\n    selectionSet,\n    fragments\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  filesExtension: 'interface.ts'\n};\n\nexport default config;\n","import * as type from './type.handlebars';\nimport * as enumTemplate from './enum.handlebars';\nimport * as scalar from './scalar.handlebars';\nimport * as union from './union.handlebars';\nimport * as operation from './operation.handlebars';\nimport * as fragment from './fragment.handlebars';\nimport * as selectionSet from '../typescript-single-file/selection-set.handlebars';\nimport * as fragments from '../typescript-single-file/fragments.handlebars';\nimport { EInputType, GeneratorConfig } from '../types';\n\nconst config: GeneratorConfig = {\n  inputType: EInputType.MULTIPLE_FILES,\n  templates: {\n    type,\n    inputType: type,\n    enum: enumTemplate,\n    interface: type,\n    scalar,\n    union,\n    operation,\n    fragment,\n    selectionSet,\n    fragments\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  filesExtension: 'ts'\n};\n\nexport default config;\n","module.exports = \"{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}{{fragmentName}}.Fragment{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}\\n\"","module.exports = \"{{#each this}}\\n{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{#if description }}  // {{description}}{{/if}}\\n{{/each}}\"","import * as index from './template.handlebars';\nimport * as type from './type.handlebars';\nimport * as schema from './schema.handlebars';\nimport * as documents from './documents.handlebars';\nimport * as selectionSet from './selection-set.handlebars';\nimport * as fragments from './fragments.handlebars';\nimport { EInputType, GeneratorConfig } from '../types';\n\nconst config: GeneratorConfig = {\n  inputType: EInputType.SINGLE_FILE,\n  templates: {\n    index,\n    type,\n    schema,\n    documents,\n    selectionSet,\n    fragments\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  outFile: 'types.ts'\n};\n\nexport default config;\n","import { GeneratorConfig } from './types';\nimport TypescriptSingleFile from './typescript-single-file/config';\nimport TypescriptMultiFile from './typescript-multi-file/config';\nimport QueryMultiple from './query-multiple/config';\nimport QuerySingle from './query-single/config';\nimport SchemaSingle from './schema-single/config';\n\nexport const definitions = {\n  ts: TypescriptSingleFile,\n  typescript: TypescriptSingleFile,\n  'ts-single': TypescriptSingleFile,\n  'typescript-single': TypescriptSingleFile,\n  'ts-multiple': TypescriptMultiFile,\n  'typescript-multiple': TypescriptMultiFile,\n  'query-multiple': QueryMultiple,\n  'query-single': QuerySingle,\n  'schema-single': SchemaSingle\n};\n\nexport function getGeneratorConfig(name: string): GeneratorConfig {\n  return definitions[name];\n}\n","module.exports = \"{{#each scalars}}\\n{{ toComment description }}\\nexport type {{ name }} = any;\\n\\n{{/each}}\\n\\n{{#each interfaces}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#each types}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#each inputTypes}}\\n  {{~> type }}\\n\\n{{/each}}\\n\\n{{#each enums}}\\n{{ toComment description }}\\nexport enum {{ name }} {\\n  {{#each values }}{{value}} = \\\"{{ value }}\\\",{{#unless @last}}\\n  {{/unless}}{{/each}}\\n}\\n\\n{{/each}}\\n\\n{{#each unions}}\\n{{ toComment description }}\\nexport type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};\\n\\n{{/each}}\\n\"","module.exports = \"{{ toComment description }}\\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{#if description}}{{ toComment description }}\\n  {{/if~}}\\n{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};\\n{{/each}}\\n}\\n\"","module.exports = \"// Automatically Generated at {{ currentTime }}\\n// tslint:disable:interface-name\\n{{> schema }}\"","module.exports = \"{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}{{ toPascalCase fragmentName}}{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}\\n\"","module.exports = \"{{#each this}}\\n{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{#if description }}  // {{description}}{{/if}}\\n{{/each}}\"","module.exports = \"{{!-- operations --}}\\n{{#each operations }}\\nexport type I{{ toPascalCase name }}Variables = {\\n{{#each variables}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};\\n{{/each}}\\n}\\n\\nexport type {{ toPascalCase name }}{{ toPascalCase operationType }} ={{#if hasFields}} {\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n\\n{{#each innerModels }}\\nexport type {{ modelType }} ={{#if hasFields}} {\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n\\n{{/each}}\\n{{/each}} \\n{{!-- operations --}}\\n\\n{{#each fragments }}\\nexport type {{ toPascalCase name}} ={{#if hasFields}} {\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n\\n{{#each innerModels }}\\nexport type {{ modelType }} ={{#if hasFields}} {\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n{{/each}}\\n\\n{{/each}}\\n\\n\"","module.exports = \"{{ toComment description }}\\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{#if description}}{{ toComment description }}\\n  {{/if~}}\\n{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; \\n{{/each}}\\n}\\n\"","module.exports = \"// Automatically Generated at {{ currentTime }}\\n\\n{{> documents }}\\n\"","module.exports = \"{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}I{{ toPascalCase fragmentName}}{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}\\n\"","module.exports = \"{{#each this}}\\n{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};{{#if description }}  // {{description}}{{/if}}\\n{{/each}}\"","module.exports = \"{{#eachImport this }}\\nimport { I{{ toPascalCase name }} } from './{{ file }}.interface';\\n{{/eachImport}}\\n\\nexport interface I{{ toPascalCase name }} {\\n  {{> selectionSet fields }}\\n}{{> fragments this }}\\n\\n{{#each innerModels }}\\nexport type {{ modelType }} = {{#unless fields}}{{> fragments this }};{{/unless}}\\n{{#if fields}}{\\n  {{> selectionSet fields }}\\n}{{/if}}\\n\\n\\n{{/each}}\\n\"","module.exports = \"{{#eachImport this }}\\nimport { I{{ toPascalCase name }} } from './{{ file }}.interface';\\n{{/eachImport}}\\n\\n{{~#if variables}}\\nexport interface I{{ toPascalCase name }}Variables {\\n  {{#each variables}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};\\n  {{/each}}\\n}{{/if}}\\n\\nexport interface I{{ toPascalCase name }}{{ toPascalCase operationType }}{{#if hasFields}} {\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n\\n{{#each innerModels }}\\nexport type {{ modelType }} ={{#if hasFields}} {\\n  {{#if isInlineFragment}}__typename: \\\"{{ modelType }}\\\";{{/if}}\\n  {{> selectionSet fields }}\\n}{{/if}}{{> fragments this }}\\n\\n{{/each}}\\n\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\n{{ toComment description }}\\nexport type {{ name }} = any;\\n\"","module.exports = \"{{ toComment description }}\\nexport enum {{ name }} {\\n  {{#each values }}{{value}} = \\\"{{ value }}\\\",{{#unless @last}}\\n  {{/unless}}{{/each}}\\n}\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\n\\n{{ toComment description }}\\nexport interface I{{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n\\n{{#each fields}}\\n  {{~# if hasArguments }}\\nexport interface I{{ toPascalCase name }}{{ toPascalCase ../name }}Args {\\n{{#each arguments}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n  {{/if}}\\n{{/each}}\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\nexport namespace {{name}} {\\n  export type Fragment = {\\n    __typename?: \\\"{{ onType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{> fragments this }}\\n  {{#each innerModels }}\\n  export type {{ modelType }} = {\\n  {{#unless hasInlineFragments}}\\n    __typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    __typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{> fragments this }}\\n  {{/each}}\\n}\\n\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\nexport namespace {{ toPascalCase name }} {\\n  export type Variables = {\\n{{#each variables}}\\n    {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};\\n{{/each}}\\n  }\\n\\n  export type {{ toPascalCase operationType }} ={{#if hasFields}} {\\n    __typename?: \\\"{{ toPascalCase operationType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{#each innerModels }}\\n\\n  export type {{ modelType }} ={{#if hasFields}} {\\n  {{#unless hasInlineFragments}}\\n    __typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    __typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{/each}}\\n}\\n\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\n{{ toComment description }}\\nexport type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};\\n\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\n{{ toComment description }}\\nexport type {{ name }} = any;\\n\"","module.exports = \"{{ toComment description }}\\nexport enum {{ name }} {\\n  {{#each values }}{{value}} = \\\"{{ value }}\\\",{{#unless @last}}\\n  {{/unless}}{{/each}}\\n}\"","module.exports = \"{{#eachImport this }}\\nimport { {{ name }} } from './{{ file }}';\\n{{/eachImport}}\\n{{ toComment description }}\\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n\\n{{#each fields}}\\n  {{~# if hasArguments }}\\nexport interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {\\n{{#each arguments}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n  {{/if}}\\n{{/each}}\"","module.exports = \"{{#each operations }}\\nexport namespace {{ toPascalCase name }} {\\n  export type Variables = {\\n  {{#each variables}}\\n    {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}};\\n  {{/each}}\\n  }\\n\\n  export type {{ toPascalCase operationType }} ={{#if hasFields}} {\\n    __typename?: \\\"{{ toPascalCase operationType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{#each innerModels }}\\n\\n  export type {{ modelType }} ={{#if hasFields}} {\\n  {{#unless hasInlineFragments}}\\n    __typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    __typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{/each}}\\n}\\n{{/each}}\\n{{#each fragments }}\\n\\nexport namespace {{name}} {\\n  export type Fragment ={{#if hasFields}} {\\n    __typename?: \\\"{{ onType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{#each innerModels }}\\n\\n  export type {{ modelType }} ={{#if hasFields}} {\\n  {{#unless hasInlineFragments}}\\n    __typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    __typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{/each}}\\n}\\n{{/each}}\\n\\n\"","module.exports = \"{{#each scalars}}\\n\\n{{ toComment description }}\\nexport type {{ name }} = any;\\n{{/each}}\\n{{#each interfaces}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#each types}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#each inputTypes}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{~#each types}}\\n  {{~#each fields}}\\n    {{~# if hasArguments }}\\nexport interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {\\n{{#each arguments}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n    {{/if}}\\n  {{/each}}\\n{{/each}}\\n{{#each enums}}\\n{{ toComment description }}\\nexport enum {{ name }} {\\n  {{#each values }}{{value}} = \\\"{{ value }}\\\",{{#unless @last}}\\n  {{/unless}}{{/each}}\\n}\\n\\n{{/each}}\\n{{#each unions}}\\n{{ toComment description }}\\nexport type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};\\n\\n{{/each}}\\n\"","module.exports = \"{{ toComment description }}\\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}\\n{{/each}}\\n}\\n\"","module.exports = \"/* tslint:disable */\\n{{#if config.printTime }}\\n// Generated in {{ currentTime }}\\n{{/if}}\\n{{> schema }}\\n{{> documents }}\\n\"","import TypescriptSingleFile from './typescript-single-file/config';\nimport TypescriptMultiFile from './typescript-multi-file/config';\nimport QueryMultiple from './query-multiple/config';\nimport QuerySingle from './query-single/config';\nimport SchemaSingle from './schema-single/config';\n\nexport { TypescriptSingleFile, TypescriptMultiFile, QueryMultiple, QuerySingle, SchemaSingle };\n\nexport { GeneratorConfig, EInputType } from './types';\nexport { getGeneratorConfig, definitions } from './get-generator';\n"],"sourceRoot":""}